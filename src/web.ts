
function wire<Args extends any[]>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<(...args: Args) => any>) {
	//console.log(target, propertyKey, descriptor)
	const originalMethod = descriptor.value!; // ! –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –º—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ value –Ω–µ undefined

	const wrappedMethod = {
		...originalMethod,
		value: function (this: any, ...args: any[]) {
			// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ç.–¥.
			console.log(`[wire] ${propertyKey} called`);
			return originalMethod.apply(this, args as Args);
		}
	}



	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
	Object.defineProperty(wrappedMethod, 'name', { value: originalMethod.name, configurable: true });
	Object.defineProperty(wrappedMethod, 'length', { value: originalMethod.length, configurable: true });

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–≤–æ–π—Å—Ç–≤–æ originalMethod
	//Object.assign( wrappedMethod, {   originalMethod } )


	// –ó–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π
	//Reflect.defineProperty(target, propertyKey, wrappedMethod);

	return wrappedMethod;
}

// –ù–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Fiber
class Job {


	@wire
	f1(id?: string) {
		console.log('üü¶ ReactiveJob.f1 called with:', id);
		return this.f2((id + '-f1'));
	}

	@wire
	f2(id: string) {
		console.log('üü¶ ReactiveJob.f2 called with:', id);
		return this.f3() * 2; // –∑–∞–≤–∏—Å–∏—Ç –æ—Ç atom
	}

	@wire
	f3() {
		console.log('üü¶ ReactiveJob.f3 called');
		return 42;
	}
}
const j1 = new Job();
//console.log(j1.f1)
console.log(j1.f1('test'));
console.log(j1.f1('test'));

console.log(j1)


// ===== –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====

